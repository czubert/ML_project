Cześć, sprawdziłęm projekt. WYkonanie jest naprawdę imponujące i widać ogrom pracy tu włożonej. Także gratuluję, bo rzadko widzę tak fajne projekty. Oczywiscie projekt uznaję za zaliczony, natomaist kilka niedociągnięć/błedów się wkradło, więc przesyłąm wszystkie uwagi:
Na sam początek - wyniki niektórych modeli są za wysokie - to niemożliwe, żeby dostać AUC powyżej 0.9 na tych danych - musi być w kodzie jakiś błąd :slightly_smiling_face: Szcze mówić, nie wiem z czego to wynika, ale przeliz to jeszcze raz po wprowadzeniu poprawek. nie zostałą przypadkiem w modelowaniu wykorzystana zmienna LoggedIn, która nei powinna wchodzić do modelu?
Licząc wiek, liczyłeś go na dzień dzisiejszy - natomiast to nie jest do konca ok. Bo jeśli ktoś składa wniosek do banku, to bak interesuje tak naprawdę wiek w momencie złożenia wniosku, a nie to w jakim wieku dana osoba jest dzisiaj. Do policzenia takiego właściwego wieku musi buć wykorzystana zmienne lead_creation_date
w sekcji Show categorical features preprocessing pod "after" wkradł sie błąd w prezentacji: jest tu ta sama tabelka co wyżej
do zamianiania zmiennej na binarną mówiąća o tym czy jest brak czy nie można wykorzystać gotowca z sklearna: https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html
transformatory dla Salary_account i Empluer name robią to samo - zostawiają ileś najczęstszych wartości, a resztę grupują do "Other". Z perspektywy jakości kodu, w takiej sytuacji powinniśmy stworzyć jedną klasę, która robi właśnie coś takiego i użyć jej w tych dwóch przypadkach (pewnie z rożnymi parametrami). Ogólnie, powinniśmy tworzyć klasy które odpowiadają za wykonanie pewnych ogólnych zadań (np. klasa ValuesGrouper, która grupuje rzadkie wartości), a nie klasy dla poszczególnych zmiennych
Odnośnie pytania w kodzie "# WHAT: da się do grida wrzucić jakoś różne parametry dla metod z tmp_pipe?" - nie jestem pewien czy rozumiem, bo przeciez w GridSearchCV z założenia drugia parametr, to właśnie siatka z różnymi wartościami parametrów, które można a wręcz należy tam podać. Więc nie wiem do konca o co pytasz.
Transformatory nei ppowinny modyfikować danych "inplace" - powinniśmy zawsze zwracać nowy obiekt, bo tutaj wywołanie pipelinu nieodwracalnie wpływa na postać podanych danych, a to nei pownno się dziać - w sensie jak mamy dane w jakiejś zmiennej, to pipeline nei poininen ich modyfikować.
Klasa SalaryAcc powinna działać analogicznie do City - w metodzie fit zliczać częstości, a w transformie tylko trnsformować. Klasa EmpName tak samo. Bo częstości trzeba określić na części treningowej.
W klasie Income podobny błąd: Kwantyl powininen być policzony raz w metodzie fit i zapisany i w transformie do niego się powinniśmy odwoływać.
Brakuje mi optymalizacji modeli - to chyba ta kwestia, o którą pytałeś - te gridsearch'e trzeba zrobić z rozpatrzeniem różnych parametrów.
Gdy mamy bardzo niezbalanswane dane, podział na train/test warto robić w taki sposób, żeby w obu cześciach był taki sam procent poszczególnych klas - w funkcji train_test_spli jest parametr stratify, który to załatwia.
Trochę tych uwag jest, ale główne błędy to te z implementacją klas. Zachęcam do poprawienia tego, bo ogólnie naprawdę super projekt, a jak jeszcze sie te aspekty dobracuje, to będzie idealny.
Prośba jeszcze o przysłanie propozycji tytułu dla tego projektu w jezyku polskim, bo dodajemy go na certyfikatach.